(define (cddr s) (cdr (cdr s)))

(define (cadr s)
    (car(cdr s))
)

(define (caddr s)
    (car (cdr(cdr s)))
)

(define (interleave lst1 lst2)
    (define (helper lst1 lst2 index final_lst)
        (if (= index 0)
            (if (null? lst1)
                (append final_lst lst2)
                (helper (cdr lst1) lst2 1 (append final_lst (list (car lst1))))
            )
            (if (null? lst2)
                (append final_lst lst1)
                (helper lst1 (cdr lst2) 0 (append final_lst (list (car lst2))))
            )
        )
    )
    (helper lst1 lst2 0 nil)
)

(define (my-filter pred lst)
    (define (helper pred lst final)
        (if (null? lst)
            final
            (if (pred (car lst))
                (helper pred (cdr lst) (append final (list (car lst))))
                (helper pred (cdr lst) final)
            )
        )
    )
    (helper pred lst ())
)

(define (concatenate s)
    (define (helper2 s sofar)
        (if (null? s)
            sofar
            (helper2 (cdr s) (append sofar (car s)))
        )
    )
    (helper2 s ())
)

(define (helper sub so_far)
    (if(null? sub)
        so_far
        (helper (cdr sub) (append so_far (list (car sub))))
    )
)
